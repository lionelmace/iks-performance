---
# Application to deploy
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mynginx
  namespace: default
spec:
  replicas: 3
  selector:
    matchLabels:
      app: mynginx
  template:   # create pods using pod definition in this template
    metadata:
      labels:
        app: mynginx
        tier: frontend
    spec:
      containers:
      - name: mynginx
        image: nginx
        imagePullPolicy: Always
        resources:
          requests:
            cpu: 250m     # 250 millicores = 1/4 core
            memory: 128Mi # 128 MB
          limits:
            cpu: 500m
            memory: 384Mi
        livenessProbe:
          httpGet:
            path: /healthcheck/
            port: 8080
          initialDelaySeconds: 3
          periodSeconds: 3
          failureThreshold: 2        

---
# Service to expose frontend
apiVersion: v1
kind: Service
metadata:
  name: mynginx
  namespace: default
  labels:
    app: mynginx
    tier: frontend
spec:
    ports:
    - protocol: TCP
      port: 8080
    selector:
      app: mynginx
      tier: frontend

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: mynginx-ingress
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "public-iks-k8s-nginx"
    #kubernetes.io/ingress.class: "private-iks-k8s-nginx"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  tls:
    - hosts:
      - iks-483cccd2f0d38128dd40d2b711142ba9-0000.eu-de.containers.appdomain.cloud
      secretName: iks-483cccd2f0d38128dd40d2b711142ba9-0000.eu-de
  rules:
  - host: iks-483cccd2f0d38128dd40d2b711142ba9-0000.eu-de.containers.appdomain.cloud
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: mynginx
            port:
              number: 8080